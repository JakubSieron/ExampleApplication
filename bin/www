#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');
var app = require('../app');
var debug = require('debug')('mathapp:server');
var https = require('https');

/**
 * Set HTTPS port
 */
var port = normalizePort(process.env.PORT || '8443');
app.set('port', port);

/**
 * Load SSL certificates
 */
var privateKey = fs.readFileSync('ssl/privatekey.pem', 'utf8');
var certificate = fs.readFileSync('ssl/server.crt', 'utf8');

var credentials = { key: privateKey, cert: certificate };

/**
 * Create HTTPS server
 */
var server = https.createServer(credentials, app);
console.log(" Serwer HTTPS uruchomiony na porcie " + port);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val; // named pipe
  }

  if (port >= 0) {
    return port; // port number
  }

  return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
